/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,11],$V2=[1,13],$V3=[1,10],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[5,13,14,24,32,40,41,42,43,44],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[14,16,28,34],$Vh=[2,18],$Vi=[1,33],$Vj=[1,46],$Vk=[1,40],$Vl=[1,38],$Vm=[1,39],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,47],$Vt=[1,48],$Vu=[1,49],$Vv=[1,50],$Vw=[1,51],$Vx=[1,52],$Vy=[1,53],$Vz=[1,54],$VA=[8,16],$VB=[1,73],$VC=[1,74],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,72],$VJ=[1,75],$VK=[1,76],$VL=[1,77],$VM=[1,78],$VN=[1,79],$VO=[1,80],$VP=[1,81],$VQ=[8,16,19,21,29,33,34,38,39,72,76,77,78,79,80,81,82,83,84,86,93],$VR=[1,100],$VS=[16,21],$VT=[8,16,19,21,29,72,83,84,93],$VU=[1,133],$VV=[1,153],$VW=[1,160],$VX=[1,155],$VY=[1,156],$VZ=[1,157],$V_=[1,158],$V$=[1,159],$V01=[1,154],$V11=[8,16,19,21,29,33,34,38,39,72,80,81,82,83,84,86,93],$V21=[8,16,19,21,29,33,34,38,39,72,76,77,79,80,81,82,83,84,86,93],$V31=[8,16,19,21,29,33,34,72,80,81,82,83,84,86,93],$V41=[14,19,32,40,41,42,43,44,60,61,65,66,67,68,73,75],$V51=[19,21],$V61=[1,264],$V71=[1,265],$V81=[19,71,74],$V91=[1,287],$Va1=[14,19,32,40,41,42,43,44,60,61,62,65,66,67,68,73,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"ptcoma":8,"ASIG_VAR":9,"METODOS":10,"MAIN":11,"FUNCIONES":12,"Rvoid":13,"identificador":14,"parA":15,"parC":16,"llaveA":17,"INSTRUCCIONES":18,"llaveC":19,"LIST_PARAMETROS":20,"coma":21,"PARAMETROS":22,"TIPO":23,"Rmain":24,"PARAMETROS_LLAMADA":25,"EXPRESION":26,"igual":27,"corchA":28,"corchC":29,"Rnew":30,"ELEMENTOS_ARRAY":31,"Rlist":32,"menor":33,"mayor":34,"Rtochararray":35,"masmas":36,"menosmenos":37,"suma":38,"menos":39,"Rint":40,"Rdouble":41,"Rchar":42,"Rboolean":43,"Rstring":44,"INSTRUCCION":45,"PRINT":46,"IF":47,"FOR":48,"while":49,"DO":50,"SWITCH":51,"LLAMADAS":52,"RETURN":53,"MODIFICAR_POSARRAY":54,"ADDLISTA":55,"MODIFICARLISTA":56,"LLAMARFUNCION":57,"punto":58,"Radd":59,"Rreturn":60,"Rif":61,"Relse":62,"ELSEIF":63,"CONEIF":64,"Rfor":65,"Rwhile":66,"Rdo":67,"Rswitch":68,"CASES":69,"CASE":70,"Rcase":71,"dospuntos":72,"Rbreak":73,"Rdefault":74,"Rprint":75,"multi":76,"div":77,"exponente":78,"modulo":79,"menorIgual":80,"mayorIgual":81,"diferente":82,"and":83,"or":84,"not":85,"igualigual":86,"decimal":87,"entero":88,"Rtrue":89,"Rfalse":90,"string":91,"char":92,"interrogacion":93,"Rlower":94,"Rup":95,"Rlen":96,"Rtrunc":97,"Rround":98,"Rtype":99,"RtoString":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",13:"Rvoid",14:"identificador",15:"parA",16:"parC",17:"llaveA",19:"llaveC",21:"coma",24:"Rmain",27:"igual",28:"corchA",29:"corchC",30:"Rnew",32:"Rlist",33:"menor",34:"mayor",35:"Rtochararray",36:"masmas",37:"menosmenos",38:"suma",39:"menos",40:"Rint",41:"Rdouble",42:"Rchar",43:"Rboolean",44:"Rstring",58:"punto",59:"Radd",60:"Rreturn",61:"Rif",62:"Relse",65:"Rfor",66:"Rwhile",67:"Rdo",68:"Rswitch",71:"Rcase",72:"dospuntos",73:"Rbreak",74:"Rdefault",75:"Rprint",76:"multi",77:"div",78:"exponente",79:"modulo",80:"menorIgual",81:"mayorIgual",82:"diferente",83:"and",84:"or",85:"not",86:"igualigual",87:"decimal",88:"entero",89:"Rtrue",90:"Rfalse",91:"string",92:"char",93:"interrogacion",94:"Rlower",95:"Rup",96:"Rlen",97:"Rtrunc",98:"Rround",99:"Rtype",100:"RtoString"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[10,7],[10,8],[20,3],[20,1],[22,2],[11,5],[11,6],[25,3],[25,1],[7,2],[7,4],[7,7],[7,10],[7,8],[7,11],[7,10],[31,3],[31,1],[9,3],[9,2],[9,2],[9,3],[9,3],[23,1],[23,1],[23,1],[23,1],[23,1],[18,2],[18,1],[45,2],[45,2],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,2],[45,2],[45,2],[45,2],[45,2],[12,8],[12,7],[57,4],[57,5],[52,3],[52,4],[56,8],[55,6],[54,6],[53,2],[47,7],[47,11],[47,8],[47,12],[63,2],[63,1],[64,8],[48,11],[48,11],[49,7],[50,9],[51,7],[69,2],[69,1],[70,6],[70,5],[46,5],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,5],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 66:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 12: case 67:
this.$=[$$[$0]];
break;
case 4: case 5: case 39: case 40: case 47: case 48: case 49: case 50: case 51: case 74:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 41: case 42: case 43: case 44: case 45: case 46: case 75:
this.$=$$[$0];
break;
case 9:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 11:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 13:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 14:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 15:
this.$ = INSTRUCCION.nuevoMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 16: case 25:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 17: case 26: case 38:
this.$ = [$$[$0]];
break;
case 18:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 19:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1)
break;
case 20:
this.$= INSTRUCCION.nuevoCasteo($$[$0-6],$$[$0-5],$$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1)
break;
case 21:
this.$= INSTRUCCION.nuevoArray($$[$0-9],$$[$0-6],$$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 22:
this.$= INSTRUCCION.nuevoArray($$[$0-7],$$[$0-4],null,$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 23:
this.$= INSTRUCCION.nuevaLista($$[$0-8],$$[$0-6],$$[$0-1],false,false,this._$.first_line, this._$.first_column+1)
break;
case 24:
this.$= INSTRUCCION.nuevaLista($$[$0-7],$$[$0-5],$$[$0],true,$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 27:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 28:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 29:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 30:
this.$= INSTRUCCION.nuevoIncrementoN($$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1);
break;
case 31:
this.$= INSTRUCCION.nuevoDecrementoN($$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1);
break;
case 32:
this.$= TIPO_DATO.ENTERO
break;
case 33:
this.$= TIPO_DATO.DECIMAL
break;
case 34:
this.$= TIPO_DATO.CHAR
break;
case 35:
this.$= TIPO_DATO.BOOL
break;
case 36:
this.$= TIPO_DATO.CADENA
break;
case 37:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 52:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1,null)
break;
case 53:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1,null)
break;
case 54:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 55:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 56:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-2],null,"FUNCION",this._$.first_line,this._$.first_column+1)
break;
case 57:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1],"FUNCION",this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCCION.nuevoModLista($$[$0-7],$$[$0-4],$$[$0],this._$.first_line,this._$.first_column+1,null)
break;
case 59:
this.$ = INSTRUCCION.nuevoAddLs($$[$0-5],$$[$0-1],this._$.first_line,this._$.first_column+1,null)
break;
case 60:
this.$ = INSTRUCCION.nuevoModPosArray($$[$0-5],$$[$0-3],$$[$0],this._$.first_line,this._$.first_column+1,null)
break;
case 61:
this.$ = INSTRUCCION.nuevoReturn($$[$0],this._$.first_line,this._$.first_column+1,null)
break;
case 62:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 63:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 69: case 70:
this.$ = INSTRUCCION.nuevoFor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 71:
 this.$ = INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1],this._$.first_line,this._$.first_column+1); 
break;
case 72:
 this.$ = INSTRUCCION.nuevoDoWhile($$[$0-6], $$[$0-2],this._$.first_line,this._$.first_column+1);
break;
case 73:
this.$= INSTRUCCION.nuevoSwitch($$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 76:
this.$= INSTRUCCION.nuevoCase($$[$0-4],$$[$0-2],this._$.first_line, this._$.first_column+1);
break;
case 77:
this.$= INSTRUCCION.nuevoDefault($$[$0-2],this._$.first_line, this._$.first_column+1);
break;
case 78:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 79:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 80:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 81:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 82:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 83:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 84:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 85:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 86:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 87:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 88:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 89:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 90:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 91:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 92:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 93:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 94:
this.$=$$[$0-1]
break;
case 95:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 96:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 97:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 98: case 99:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 100:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 101:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
case 102:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
case 103:
this.$= INSTRUCCION.nuevoTernario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1);
break;
case 104:
this.$= INSTRUCCION.nuevaPosArray($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 105:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.LOWER,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 106:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.UPPER,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 107:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.LENGTH,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 108:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.TRUNCATE,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 109:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.ROUND,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 110:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.TYPE,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 111:
this.$=INSTRUCCION.nuevaNativa(TIPO_OPERACION.TOSTRING,$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:$V0,14:$V1,23:9,24:$V2,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{1:[3]},{5:[1,19],6:20,7:4,9:5,10:6,11:7,12:8,13:$V0,14:$V1,23:9,24:$V2,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},o($V9,[2,3]),{8:[1,21]},{8:[1,22]},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{14:[1,23],28:$Va},{33:[1,25]},{27:$Vb,36:$Vc,37:$Vd,38:$Ve,39:$Vf},{14:[1,31]},{14:[1,32]},o($Vg,[2,32]),o($Vg,[2,33]),o($Vg,[2,34]),o($Vg,[2,35]),o($Vg,[2,36]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,4]),o($V9,[2,5]),{8:$Vh,15:[1,34],27:$Vi},{29:[1,35]},{23:36,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{14:$Vj,15:$Vk,26:37,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VA,[2,28]),o($VA,[2,29]),{14:$Vj,15:$Vk,26:55,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:56,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{15:[1,57]},{15:[1,58]},{14:$Vj,15:[1,60],26:59,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{16:[1,62],20:61,22:63,23:64,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{14:[1,65]},{34:[1,66]},o($VA,[2,27],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),{14:$Vj,15:$Vk,26:82,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:83,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:84,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VQ,[2,96]),o($VQ,[2,97]),o($VQ,[2,98]),o($VQ,[2,99]),o($VQ,[2,100]),o($VQ,[2,101],{28:[1,85]}),o($VQ,[2,102]),{15:[1,86]},{15:[1,87]},{15:[1,88]},{15:[1,89]},{15:[1,90]},{15:[1,91]},{15:[1,92]},o($VA,[2,30],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),o($VA,[2,31],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),{16:[1,93],20:94,22:63,23:64,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{14:$Vj,15:$Vk,16:[1,95],25:96,26:97,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{8:[2,19],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{14:$Vj,15:$Vk,23:98,26:84,39:$Vl,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{16:[1,99],21:$VR},{17:[1,101]},o($VS,[2,12]),{14:[1,102]},{27:[1,103]},{14:[1,104]},{14:$Vj,15:$Vk,26:105,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:106,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:107,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:108,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:109,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:110,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:111,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:112,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:113,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:114,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:115,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:116,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:117,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:118,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:119,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VQ,[2,92]),o($VT,[2,93],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,86:$VO}),{16:[1,120],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{14:$Vj,15:$Vk,26:121,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:122,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:123,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:124,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:125,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:126,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:127,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:128,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{17:[1,129]},{16:[1,130],21:$VR},{8:[1,131]},{16:[1,132],21:$VU},o($VS,[2,17],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),{16:[1,134]},{17:[1,135]},{22:136,23:64,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{7:139,9:140,14:$VV,18:137,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($VS,[2,13]),{17:[1,162],30:[1,161]},{27:[1,163]},o($V11,[2,79],{76:$VF,77:$VG,78:$VH,79:$VI}),o($V11,[2,80],{76:$VF,77:$VG,78:$VH,79:$VI}),o($V21,[2,81],{78:$VH}),o($V21,[2,82],{78:$VH}),o($V21,[2,83]),o($V21,[2,84],{78:$VH}),o($V31,[2,85],{38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),o($V31,[2,86],{38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),o($V31,[2,87],{38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),o($V31,[2,88],{38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),o($V31,[2,89],{38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),o($VT,[2,90],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,86:$VO}),o([8,16,19,21,29,72,84],[2,91],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,86:$VO,93:$VP}),o($V31,[2,95],{38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),{33:$VB,34:$VC,38:$VD,39:$VE,72:[1,164],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},o($VQ,[2,94]),{29:[1,165],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,166],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,167],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,168],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,169],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,170],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,171],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,172],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{7:139,9:140,14:$VV,18:173,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{17:[1,174]},o($V9,[2,14]),{8:[1,175]},{14:$Vj,15:$Vk,26:176,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:177,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{7:139,9:140,14:$VV,18:178,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($VS,[2,11]),{7:139,9:140,14:$VV,19:[1,179],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($V41,[2,38]),{8:[1,181]},{8:[1,182]},o($V41,[2,41]),o($V41,[2,42]),o($V41,[2,43]),o($V41,[2,44]),o($V41,[2,45]),o($V41,[2,46]),{8:[1,183]},{8:[1,184]},{8:[1,185]},{8:[1,186]},{8:[1,187]},{14:[1,188],28:$Va},{15:[1,189],27:$Vb,28:[1,190],36:$Vc,37:$Vd,38:$Ve,39:$Vf,58:[1,191]},{15:[1,192]},{15:[1,193]},{15:[1,194]},{15:[1,195]},{17:[1,196]},{15:[1,197]},{14:$Vj,15:$Vk,26:198,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{23:199,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{14:$Vj,15:$Vk,26:201,31:200,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{30:[1,202],35:[1,203]},{14:$Vj,15:$Vk,26:204,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VQ,[2,104]),o($VQ,[2,105]),o($VQ,[2,106]),o($VQ,[2,107]),o($VQ,[2,108]),o($VQ,[2,109]),o($VQ,[2,110]),o($VQ,[2,111]),{7:139,9:140,14:$VV,19:[1,205],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{7:139,9:140,14:$VV,18:206,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($V9,[2,15]),o($VS,[2,16],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),{8:[2,20],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{7:139,9:140,14:$VV,19:[1,207],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($V9,[2,53]),o($V41,[2,37]),o($V41,[2,39]),o($V41,[2,40]),o($V41,[2,47]),o($V41,[2,48]),o($V41,[2,49]),o($V41,[2,50]),o($V41,[2,51]),{8:$Vh,27:$Vi},{14:$Vj,15:$Vk,16:[1,208],25:209,26:97,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:210,28:[1,211],39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{59:[1,212]},{14:$Vj,15:$Vk,26:213,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:214,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{7:215,9:216,14:$V1,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{14:$Vj,15:$Vk,26:217,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{7:139,9:140,14:$VV,18:218,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{14:$Vj,15:$Vk,26:219,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{8:[2,61],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{28:[1,220]},{19:[1,221],21:[1,222]},o($V51,[2,26],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),{32:[1,223]},{15:[1,224]},o([8,16,19,21,29,72,84,93],[2,103],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,86:$VO}),o($V9,[2,9]),{7:139,9:140,14:$VV,19:[1,225],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($V9,[2,52]),{8:[2,56]},{16:[1,226],21:$VU},{29:[1,227],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{14:$Vj,15:$Vk,26:228,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{15:[1,229]},{16:[1,230],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{16:[1,231],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{8:[1,232]},{8:[1,233]},{16:[1,234],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{7:139,9:140,14:$VV,19:[1,235],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{16:[1,236],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{14:$Vj,15:$Vk,26:237,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{8:[2,22]},{14:$Vj,15:$Vk,26:238,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{33:[1,239]},{14:$Vj,15:$Vk,26:240,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($V9,[2,10]),{8:[2,57]},{27:[1,241]},{29:[1,242],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{14:$Vj,15:$Vk,26:243,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{8:[1,244]},{17:[1,245]},{14:$Vj,15:$Vk,26:246,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{14:$Vj,15:$Vk,26:247,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{17:[1,248]},{66:[1,249]},{17:[1,250]},{29:[1,251],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},o($V51,[2,25],{33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP}),{23:252,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8},{16:[1,253],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{14:$Vj,15:$Vk,26:254,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{29:[1,255]},{16:[1,256],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},o($V41,[2,78]),{7:139,9:140,14:$VV,18:257,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{8:[1,258],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{8:[1,259],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{7:139,9:140,14:$VV,18:260,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{15:[1,261]},{69:262,70:263,71:$V61,74:$V71},{8:[2,21]},{34:[1,266]},{8:[2,24]},{8:[2,60],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{27:[1,267]},{8:[2,59]},{7:139,9:140,14:$VV,19:[1,268],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{9:269,14:$V1},{9:270,14:$V1},{7:139,9:140,14:$VV,19:[1,271],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{14:$Vj,15:$Vk,26:272,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{19:[1,273],70:274,71:$V61,74:$V71},o($V81,[2,75]),{14:$Vj,15:$Vk,26:275,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{72:[1,276]},{8:[2,23]},{14:$Vj,15:$Vk,26:277,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($V41,[2,62],{63:279,64:280,62:[1,278]}),{16:[1,281]},{16:[1,282]},o($V41,[2,71]),{16:[1,283],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},o($V41,[2,73]),o($V81,[2,74]),{33:$VB,34:$VC,38:$VD,39:$VE,72:[1,284],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{7:139,9:140,14:$VV,18:285,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{8:[2,58],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{17:[1,286],61:$V91},o($V41,[2,64],{64:289,62:[1,288]}),o($Va1,[2,67]),{17:[1,290]},{17:[1,291]},{8:[1,292]},{7:139,9:140,14:$VV,18:293,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{7:139,9:140,14:$VV,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,73:[1,294],75:$V01},{7:139,9:140,14:$VV,18:295,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{15:[1,296]},{17:[1,297],61:$V91},o($Va1,[2,66]),{7:139,9:140,14:$VV,18:298,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{7:139,9:140,14:$VV,18:299,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($V41,[2,72]),{7:139,9:140,14:$VV,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,73:[1,300],75:$V01},{8:[1,301]},{7:139,9:140,14:$VV,19:[1,302],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{14:$Vj,15:$Vk,26:303,39:$Vl,85:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{7:139,9:140,14:$VV,18:304,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{7:139,9:140,14:$VV,19:[1,305],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{7:139,9:140,14:$VV,19:[1,306],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{8:[1,307]},o($V81,[2,77]),o($V41,[2,63]),{16:[1,308],33:$VB,34:$VC,38:$VD,39:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,86:$VO,93:$VP},{7:139,9:140,14:$VV,19:[1,309],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($V41,[2,69]),o($V41,[2,70]),o($V81,[2,76]),{17:[1,310]},o($V41,[2,65]),{7:139,9:140,14:$VV,18:311,23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:138,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},{7:139,9:140,14:$VV,19:[1,312],23:152,32:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:180,46:141,47:142,48:143,49:144,50:145,51:146,52:147,53:148,54:149,55:150,56:151,60:$VW,61:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,75:$V01},o($Va1,[2,68])],
defaultActions: {19:[2,1],208:[2,56],221:[2,22],226:[2,57],251:[2,21],253:[2,24],256:[2,59],266:[2,23]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

       const TIPO_OPERACION= require('./controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('./controladores/Enums/TipoValor');
        const TIPO_DATO= require('./controladores/Enums/TipoDato');
        const INSTRUCCION = require('./controladores/Instruccion/Instruccion');

        
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 40
break;
case 4:return 41
break;
case 5:return 43
break;
case 6:return 42
break;
case 7:return 44
break;
case 8:return 61
break;
case 9:return 62
break;
case 10:return 13
break;
case 11:return 75
break;
case 12:return 89
break;
case 13:return 90
break;
case 14:return 24
break;
case 15:return 65
break;
case 16:return 66
break;
case 17:return 67
break;
case 18:return 68
break;
case 19:return 71
break;
case 20:return 73
break;
case 21:return 74
break;
case 22:return 60
break;
case 23:return 30
break;
case 24:return 32
break;
case 25:return 59
break;
case 26:return 94
break;
case 27:return 95
break;
case 28:return 96
break;
case 29:return 97
break;
case 30:return 98
break;
case 31:return 99
break;
case 32:return 100
break;
case 33:return 35
break;
case 34:return 93
break;
case 35:return 87
break;
case 36:return 58
break;
case 37:return 88
break;
case 38:return 86       
break;
case 39:return 82
break;
case 40:return 80
break;
case 41:return 33
break;
case 42:return 81
break;
case 43:return 27
break;
case 44:return 34
break;
case 45:return 21
break;
case 46:return 8
break;
case 47:return 72
break;
case 48:return 84
break;
case 49:return 83
break;
case 50:return 17
break;
case 51:return 19
break;
case 52:return 76
break;
case 53:return 77
break;
case 54:return 37
break;
case 55:return 36   
break;
case 56:return 39
break;
case 57:return 38
break;
case 58:return 78
break;
case 59:return 85
break;
case 60:return 79
break;
case 61:return 15
break;
case 62:return 16
break;
case 63:return 28
break;
case 64:return 29
break;
case 65:return 14
break;
case 66:return 91
break;
case 67:return 92
break;
case 68:return 5; 
break;
case 69:console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
case 70:
function yyerror(msg, hash) {
    console.error("Error en línea " + hash.line + ", columna " + hash.loc.first_column + ": " + msg);
}

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:tolower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:\?)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}